#![allow(
  non_camel_case_types,
  unused,
  clippy::redundant_closure,
  clippy::useless_conversion,
  clippy::unit_arg,
  clippy::double_parens,
  non_snake_case,
  clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_runtime_started_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
    WrapInfo {
      debug_name: "runtime_started",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Result::<_, ()>::Ok(runtime_started()),
  )
}
fn wire_run_engine_impl(
  port_: MessagePort,
  args: impl Wire2Api<EngineOptionsExternal> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
    WrapInfo {
      debug_name: "run_engine",
      port: Some(port_),
      mode: FfiCallMode::Stream,
    },
    move || {
      let api_args = args.wire2api();
      move |task_callback| run_engine(task_callback.stream_sink::<_, String>(), api_args)
    },
  )
}
fn wire_send_impl(port_: MessagePort, msg_json: impl Wire2Api<String> + UnwindSafe) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
    WrapInfo {
      debug_name: "send",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_msg_json = msg_json.wire2api();
      move |task_callback| Result::<_, ()>::Ok(send(api_msg_json))
    },
  )
}
fn wire_stop_engine_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
    WrapInfo {
      debug_name: "stop_engine",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Result::<_, ()>::Ok(stop_engine()),
  )
}
fn wire_send_backend_server_message_impl(
  port_: MessagePort,
  msg: impl Wire2Api<String> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
    WrapInfo {
      debug_name: "send_backend_server_message",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_msg = msg.wire2api();
      move |task_callback| Result::<_, ()>::Ok(send_backend_server_message(api_msg))
    },
  )
}
fn wire_setup_device_configuration_manager_impl(
  port_: MessagePort,
  base_config: impl Wire2Api<Option<String>> + UnwindSafe,
  user_config: impl Wire2Api<Option<String>> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
    WrapInfo {
      debug_name: "setup_device_configuration_manager",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_base_config = base_config.wire2api();
      let api_user_config = user_config.wire2api();
      move |task_callback| {
        Result::<_, ()>::Ok(setup_device_configuration_manager(
          api_base_config,
          api_user_config,
        ))
      }
    },
  )
}
fn wire_get_user_websocket_communication_specifiers_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<(String, ExposedWebsocketSpecifier)>, _>(
    WrapInfo {
      debug_name: "get_user_websocket_communication_specifiers",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Result::<_, ()>::Ok(get_user_websocket_communication_specifiers()),
  )
}
fn wire_get_user_serial_communication_specifiers_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<(String, ExposedSerialSpecifier)>, _>(
    WrapInfo {
      debug_name: "get_user_serial_communication_specifiers",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Result::<_, ()>::Ok(get_user_serial_communication_specifiers()),
  )
}
fn wire_get_user_device_definitions_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER
    .wrap::<_, _, _, Vec<(ExposedUserDeviceIdentifier, ExposedUserDeviceDefinition)>, _>(
      WrapInfo {
        debug_name: "get_user_device_definitions",
        port: Some(port_),
        mode: FfiCallMode::Normal,
      },
      move || move |task_callback| Result::<_, ()>::Ok(get_user_device_definitions()),
    )
}
fn wire_get_protocol_names_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<String>, _>(
    WrapInfo {
      debug_name: "get_protocol_names",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Result::<_, ()>::Ok(get_protocol_names()),
  )
}
fn wire_add_websocket_specifier_impl(
  port_: MessagePort,
  protocol: impl Wire2Api<String> + UnwindSafe,
  name: impl Wire2Api<String> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
    WrapInfo {
      debug_name: "add_websocket_specifier",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_protocol = protocol.wire2api();
      let api_name = name.wire2api();
      move |task_callback| Result::<_, ()>::Ok(add_websocket_specifier(api_protocol, api_name))
    },
  )
}
fn wire_remove_websocket_specifier_impl(
  port_: MessagePort,
  protocol: impl Wire2Api<String> + UnwindSafe,
  name: impl Wire2Api<String> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
    WrapInfo {
      debug_name: "remove_websocket_specifier",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_protocol = protocol.wire2api();
      let api_name = name.wire2api();
      move |task_callback| Result::<_, ()>::Ok(remove_websocket_specifier(api_protocol, api_name))
    },
  )
}
fn wire_add_serial_specifier_impl(
  port_: MessagePort,
  protocol: impl Wire2Api<String> + UnwindSafe,
  port: impl Wire2Api<String> + UnwindSafe,
  baud_rate: impl Wire2Api<u32> + UnwindSafe,
  data_bits: impl Wire2Api<u8> + UnwindSafe,
  stop_bits: impl Wire2Api<u8> + UnwindSafe,
  parity: impl Wire2Api<String> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
    WrapInfo {
      debug_name: "add_serial_specifier",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_protocol = protocol.wire2api();
      let api_port = port.wire2api();
      let api_baud_rate = baud_rate.wire2api();
      let api_data_bits = data_bits.wire2api();
      let api_stop_bits = stop_bits.wire2api();
      let api_parity = parity.wire2api();
      move |task_callback| {
        Result::<_, ()>::Ok(add_serial_specifier(
          api_protocol,
          api_port,
          api_baud_rate,
          api_data_bits,
          api_stop_bits,
          api_parity,
        ))
      }
    },
  )
}
fn wire_remove_serial_specifier_impl(
  port_: MessagePort,
  protocol: impl Wire2Api<String> + UnwindSafe,
  port: impl Wire2Api<String> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
    WrapInfo {
      debug_name: "remove_serial_specifier",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_protocol = protocol.wire2api();
      let api_port = port.wire2api();
      move |task_callback| Result::<_, ()>::Ok(remove_serial_specifier(api_protocol, api_port))
    },
  )
}
fn wire_update_user_config_impl(
  port_: MessagePort,
  identifier: impl Wire2Api<ExposedUserDeviceIdentifier> + UnwindSafe,
  config: impl Wire2Api<ExposedUserDeviceDefinition> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
    WrapInfo {
      debug_name: "update_user_config",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_identifier = identifier.wire2api();
      let api_config = config.wire2api();
      move |task_callback| Result::<_, ()>::Ok(update_user_config(api_identifier, api_config))
    },
  )
}
fn wire_remove_user_config_impl(
  port_: MessagePort,
  identifier: impl Wire2Api<ExposedUserDeviceIdentifier> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
    WrapInfo {
      debug_name: "remove_user_config",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_identifier = identifier.wire2api();
      move |task_callback| Result::<_, ()>::Ok(remove_user_config(api_identifier))
    },
  )
}
fn wire_get_user_config_str_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
    WrapInfo {
      debug_name: "get_user_config_str",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Result::<_, ()>::Ok(get_user_config_str()),
  )
}
fn wire_setup_logging_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
    WrapInfo {
      debug_name: "setup_logging",
      port: Some(port_),
      mode: FfiCallMode::Stream,
    },
    move || {
      move |task_callback| {
        Result::<_, ()>::Ok(setup_logging(task_callback.stream_sink::<_, String>()))
      }
    },
  )
}
fn wire_shutdown_logging_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
    WrapInfo {
      debug_name: "shutdown_logging",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Result::<_, ()>::Ok(shutdown_logging()),
  )
}
fn wire_crash_reporting_impl(
  port_: MessagePort,
  sentry_api_key: impl Wire2Api<String> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
    WrapInfo {
      debug_name: "crash_reporting",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_sentry_api_key = sentry_api_key.wire2api();
      move |task_callback| Result::<_, ()>::Ok(crash_reporting(api_sentry_api_key))
    },
  )
}
// Section: wrapper structs

#[derive(Clone)]
pub struct mirror_ButtplugActuatorFeatureMessageType(ButtplugActuatorFeatureMessageType);

#[derive(Clone)]
pub struct mirror_ButtplugSensorFeatureMessageType(ButtplugSensorFeatureMessageType);

#[derive(Clone)]
pub struct mirror_FeatureType(FeatureType);

// Section: static checks

const _: fn() = || {
  match None::<ButtplugActuatorFeatureMessageType>.unwrap() {
    ButtplugActuatorFeatureMessageType::ValueCmd => {}
    ButtplugActuatorFeatureMessageType::ValueWithParameterCmd => {}
  }
  match None::<ButtplugSensorFeatureMessageType>.unwrap() {
    ButtplugSensorFeatureMessageType::SensorReadCmd => {}
    ButtplugSensorFeatureMessageType::SensorSubscribeCmd => {}
  }
  match None::<FeatureType>.unwrap() {
    FeatureType::Unknown => {}
    FeatureType::Vibrate => {}
    FeatureType::Rotate => {}
    FeatureType::Oscillate => {}
    FeatureType::Constrict => {}
    FeatureType::Inflate => {}
    FeatureType::Position => {}
    FeatureType::Battery => {}
    FeatureType::RSSI => {}
    FeatureType::Button => {}
    FeatureType::Pressure => {}
    FeatureType::Raw => {}
    FeatureType::RotateWithDirection => {}
    FeatureType::PositionWithDuration => {}
  }
};
// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
  fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
  *mut S: Wire2Api<T>,
{
  fn wire2api(self) -> Option<T> {
    (!self.is_null()).then(|| self.wire2api())
  }
}

impl Wire2Api<bool> for bool {
  fn wire2api(self) -> bool {
    self
  }
}

impl Wire2Api<ButtplugActuatorFeatureMessageType> for i32 {
  fn wire2api(self) -> ButtplugActuatorFeatureMessageType {
    match self {
      0 => ButtplugActuatorFeatureMessageType::ValueCmd,
      1 => ButtplugActuatorFeatureMessageType::ValueWithParameterCmd,
      _ => unreachable!(
        "Invalid variant for ButtplugActuatorFeatureMessageType: {}",
        self
      ),
    }
  }
}
impl Wire2Api<ButtplugSensorFeatureMessageType> for i32 {
  fn wire2api(self) -> ButtplugSensorFeatureMessageType {
    match self {
      0 => ButtplugSensorFeatureMessageType::SensorReadCmd,
      1 => ButtplugSensorFeatureMessageType::SensorSubscribeCmd,
      _ => unreachable!(
        "Invalid variant for ButtplugSensorFeatureMessageType: {}",
        self
      ),
    }
  }
}

impl Wire2Api<FeatureType> for i32 {
  fn wire2api(self) -> FeatureType {
    match self {
      0 => FeatureType::Unknown,
      1 => FeatureType::Vibrate,
      2 => FeatureType::Rotate,
      3 => FeatureType::Oscillate,
      4 => FeatureType::Constrict,
      5 => FeatureType::Inflate,
      6 => FeatureType::Position,
      7 => FeatureType::Battery,
      8 => FeatureType::RSSI,
      9 => FeatureType::Button,
      10 => FeatureType::Pressure,
      11 => FeatureType::Raw,
      12 => FeatureType::RotateWithDirection,
      13 => FeatureType::PositionWithDuration,
      _ => unreachable!("Invalid variant for FeatureType: {}", self),
    }
  }
}
impl Wire2Api<i32> for i32 {
  fn wire2api(self) -> i32 {
    self
  }
}

impl Wire2Api<u16> for u16 {
  fn wire2api(self) -> u16 {
    self
  }
}
impl Wire2Api<u32> for u32 {
  fn wire2api(self) -> u32 {
    self
  }
}
impl Wire2Api<u8> for u8 {
  fn wire2api(self) -> u8 {
    self
  }
}

// Section: impl IntoDart

impl support::IntoDart for mirror_ButtplugActuatorFeatureMessageType {
  fn into_dart(self) -> support::DartAbi {
    match self.0 {
      ButtplugActuatorFeatureMessageType::ValueCmd => 0,
      ButtplugActuatorFeatureMessageType::ValueWithParameterCmd => 1,
    }
    .into_dart()
  }
}
impl support::IntoDartExceptPrimitive for mirror_ButtplugActuatorFeatureMessageType {}
impl rust2dart::IntoIntoDart<mirror_ButtplugActuatorFeatureMessageType>
  for ButtplugActuatorFeatureMessageType
{
  fn into_into_dart(self) -> mirror_ButtplugActuatorFeatureMessageType {
    mirror_ButtplugActuatorFeatureMessageType(self)
  }
}

impl support::IntoDart for mirror_ButtplugSensorFeatureMessageType {
  fn into_dart(self) -> support::DartAbi {
    match self.0 {
      ButtplugSensorFeatureMessageType::SensorReadCmd => 0,
      ButtplugSensorFeatureMessageType::SensorSubscribeCmd => 1,
    }
    .into_dart()
  }
}
impl support::IntoDartExceptPrimitive for mirror_ButtplugSensorFeatureMessageType {}
impl rust2dart::IntoIntoDart<mirror_ButtplugSensorFeatureMessageType>
  for ButtplugSensorFeatureMessageType
{
  fn into_into_dart(self) -> mirror_ButtplugSensorFeatureMessageType {
    mirror_ButtplugSensorFeatureMessageType(self)
  }
}

impl support::IntoDart for ExposedDeviceFeature {
  fn into_dart(self) -> support::DartAbi {
    vec![
      self.description.into_into_dart().into_dart(),
      self.id.into_into_dart().into_dart(),
      self.base_id.into_dart(),
      self.feature_type.into_into_dart().into_dart(),
      self.actuator.into_dart(),
      self.sensor.into_dart(),
    ]
    .into_dart()
  }
}
impl support::IntoDartExceptPrimitive for ExposedDeviceFeature {}
impl rust2dart::IntoIntoDart<ExposedDeviceFeature> for ExposedDeviceFeature {
  fn into_into_dart(self) -> Self {
    self
  }
}

impl support::IntoDart for ExposedDeviceFeatureActuator {
  fn into_dart(self) -> support::DartAbi {
    vec![
      self.step_range.into_into_dart().into_dart(),
      self.step_limit.into_into_dart().into_dart(),
      self.messages.into_into_dart().into_dart(),
    ]
    .into_dart()
  }
}
impl support::IntoDartExceptPrimitive for ExposedDeviceFeatureActuator {}
impl rust2dart::IntoIntoDart<ExposedDeviceFeatureActuator> for ExposedDeviceFeatureActuator {
  fn into_into_dart(self) -> Self {
    self
  }
}

impl support::IntoDart for ExposedDeviceFeatureSensor {
  fn into_dart(self) -> support::DartAbi {
    vec![
      self.value_range.into_into_dart().into_dart(),
      self.messages.into_into_dart().into_dart(),
    ]
    .into_dart()
  }
}
impl support::IntoDartExceptPrimitive for ExposedDeviceFeatureSensor {}
impl rust2dart::IntoIntoDart<ExposedDeviceFeatureSensor> for ExposedDeviceFeatureSensor {
  fn into_into_dart(self) -> Self {
    self
  }
}

impl support::IntoDart for ExposedSerialSpecifier {
  fn into_dart(self) -> support::DartAbi {
    vec![
      self.baud_rate.into_into_dart().into_dart(),
      self.data_bits.into_into_dart().into_dart(),
      self.stop_bits.into_into_dart().into_dart(),
      self.parity.into_into_dart().into_dart(),
      self.port.into_into_dart().into_dart(),
    ]
    .into_dart()
  }
}
impl support::IntoDartExceptPrimitive for ExposedSerialSpecifier {}
impl rust2dart::IntoIntoDart<ExposedSerialSpecifier> for ExposedSerialSpecifier {
  fn into_into_dart(self) -> Self {
    self
  }
}

impl support::IntoDart for ExposedUserDeviceCustomization {
  fn into_dart(self) -> support::DartAbi {
    vec![
      self.display_name.into_dart(),
      self.allow.into_into_dart().into_dart(),
      self.deny.into_into_dart().into_dart(),
      self.index.into_into_dart().into_dart(),
    ]
    .into_dart()
  }
}
impl support::IntoDartExceptPrimitive for ExposedUserDeviceCustomization {}
impl rust2dart::IntoIntoDart<ExposedUserDeviceCustomization> for ExposedUserDeviceCustomization {
  fn into_into_dart(self) -> Self {
    self
  }
}

impl support::IntoDart for ExposedUserDeviceDefinition {
  fn into_dart(self) -> support::DartAbi {
    vec![
      self.name.into_into_dart().into_dart(),
      self.id.into_into_dart().into_dart(),
      self.base_id.into_dart(),
      self.features.into_into_dart().into_dart(),
      self.user_config.into_into_dart().into_dart(),
    ]
    .into_dart()
  }
}
impl support::IntoDartExceptPrimitive for ExposedUserDeviceDefinition {}
impl rust2dart::IntoIntoDart<ExposedUserDeviceDefinition> for ExposedUserDeviceDefinition {
  fn into_into_dart(self) -> Self {
    self
  }
}

impl support::IntoDart for ExposedUserDeviceIdentifier {
  fn into_dart(self) -> support::DartAbi {
    vec![
      self.address.into_into_dart().into_dart(),
      self.protocol.into_into_dart().into_dart(),
      self.identifier.into_dart(),
    ]
    .into_dart()
  }
}
impl support::IntoDartExceptPrimitive for ExposedUserDeviceIdentifier {}
impl rust2dart::IntoIntoDart<ExposedUserDeviceIdentifier> for ExposedUserDeviceIdentifier {
  fn into_into_dart(self) -> Self {
    self
  }
}

impl support::IntoDart for ExposedWebsocketSpecifier {
  fn into_dart(self) -> support::DartAbi {
    vec![self.name.into_into_dart().into_dart()].into_dart()
  }
}
impl support::IntoDartExceptPrimitive for ExposedWebsocketSpecifier {}
impl rust2dart::IntoIntoDart<ExposedWebsocketSpecifier> for ExposedWebsocketSpecifier {
  fn into_into_dart(self) -> Self {
    self
  }
}

impl support::IntoDart for mirror_FeatureType {
  fn into_dart(self) -> support::DartAbi {
    match self.0 {
      FeatureType::Unknown => 0,
      FeatureType::Vibrate => 1,
      FeatureType::Rotate => 2,
      FeatureType::Oscillate => 3,
      FeatureType::Constrict => 4,
      FeatureType::Inflate => 5,
      FeatureType::Position => 6,
      FeatureType::Battery => 7,
      FeatureType::RSSI => 8,
      FeatureType::Button => 9,
      FeatureType::Pressure => 10,
      FeatureType::Raw => 11,
      FeatureType::RotateWithDirection => 12,
      FeatureType::PositionWithDuration => 13,
    }
    .into_dart()
  }
}
impl support::IntoDartExceptPrimitive for mirror_FeatureType {}
impl rust2dart::IntoIntoDart<mirror_FeatureType> for FeatureType {
  fn into_into_dart(self) -> mirror_FeatureType {
    mirror_FeatureType(self)
  }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use self::io::*;
