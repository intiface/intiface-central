// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/device_config.dart';
import 'api/runtime.dart';
import 'api/specifiers.dart';
import 'api/util.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.10.0';

  @override
  int get rustContentHash => -1713113312;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_intiface_central',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  UuidValue crateApiDeviceConfigExposedDeviceDefinitionId({
    required ExposedDeviceDefinition that,
  });

  String crateApiDeviceConfigExposedDeviceDefinitionName({
    required ExposedDeviceDefinition that,
  });

  void crateApiDeviceConfigExposedDeviceDefinitionSetUserConfig({
    required ExposedDeviceDefinition that,
    required ExposedUserDeviceCustomization config,
  });

  ExposedUserDeviceCustomization
  crateApiDeviceConfigExposedDeviceDefinitionUserConfig({
    required ExposedDeviceDefinition that,
  });

  String crateApiDeviceConfigExposedUserDeviceIdentifierAddress({
    required ExposedUserDeviceIdentifier that,
  });

  String? crateApiDeviceConfigExposedUserDeviceIdentifierIdentifier({
    required ExposedUserDeviceIdentifier that,
  });

  ExposedUserDeviceIdentifier
  crateApiDeviceConfigExposedUserDeviceIdentifierNew({
    required String address,
    required String protocol,
    String? identifier,
  });

  String crateApiDeviceConfigExposedUserDeviceIdentifierProtocol({
    required ExposedUserDeviceIdentifier that,
  });

  Future<void> crateApiSpecifiersAddSerialSpecifier({
    required String protocol,
    required String port,
    required int baudRate,
    required int dataBits,
    required int stopBits,
    required String parity,
  });

  Future<void> crateApiSpecifiersAddWebsocketSpecifier({
    required String protocol,
    required String name,
  });

  Future<void> crateApiUtilCrashReporting({required String sentryApiKey});

  Future<List<String>> crateApiSpecifiersGetProtocolNames();

  Future<String> crateApiDeviceConfigGetUserConfigStr();

  Future<Map<ExposedUserDeviceIdentifier, ExposedDeviceDefinition>>
  crateApiDeviceConfigGetUserDeviceDefinitions();

  Future<List<(String, ExposedSerialSpecifier)>>
  crateApiSpecifiersGetUserSerialCommunicationSpecifiers();

  Future<List<(String, ExposedWebsocketSpecifier)>>
  crateApiSpecifiersGetUserWebsocketCommunicationSpecifiers();

  Future<void> crateApiSpecifiersRemoveSerialSpecifier({
    required String protocol,
    required String port,
  });

  Future<void> crateApiDeviceConfigRemoveUserConfig({
    required ExposedUserDeviceIdentifier identifier,
  });

  Future<void> crateApiSpecifiersRemoveWebsocketSpecifier({
    required String protocol,
    required String name,
  });

  Stream<String> crateApiRuntimeRunEngine({
    required EngineOptionsExternal args,
  });

  Future<bool> crateApiRuntimeRustRuntimeStarted();

  Future<void> crateApiRuntimeSendBackendServerMessage({required String msg});

  Future<void> crateApiRuntimeSendRuntimeMsg({required String msgJson});

  Future<void> crateApiSpecifiersSetupDeviceConfigurationManager({
    String? baseConfig,
    String? userConfig,
  });

  Stream<String> crateApiUtilSetupLogging();

  Future<void> crateApiUtilShutdownLogging();

  Future<void> crateApiRuntimeStopEngine();

  Future<void> crateApiDeviceConfigUpdateUserConfig({
    required ExposedUserDeviceIdentifier identifier,
    required ExposedDeviceDefinition config,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ExposedDeviceDefinition;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ExposedDeviceDefinition;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ExposedDeviceDefinitionPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ExposedUserDeviceIdentifier;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ExposedUserDeviceIdentifier;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ExposedUserDeviceIdentifierPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  UuidValue crateApiDeviceConfigExposedDeviceDefinitionId({
    required ExposedDeviceDefinition that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_Uuid,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDeviceConfigExposedDeviceDefinitionIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDeviceConfigExposedDeviceDefinitionIdConstMeta =>
      const TaskConstMeta(
        debugName: "ExposedDeviceDefinition_id",
        argNames: ["that"],
      );

  @override
  String crateApiDeviceConfigExposedDeviceDefinitionName({
    required ExposedDeviceDefinition that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDeviceConfigExposedDeviceDefinitionNameConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDeviceConfigExposedDeviceDefinitionNameConstMeta =>
      const TaskConstMeta(
        debugName: "ExposedDeviceDefinition_name",
        argNames: ["that"],
      );

  @override
  void crateApiDeviceConfigExposedDeviceDefinitionSetUserConfig({
    required ExposedDeviceDefinition that,
    required ExposedUserDeviceCustomization config,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
            that,
            serializer,
          );
          sse_encode_box_autoadd_exposed_user_device_customization(
            config,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDeviceConfigExposedDeviceDefinitionSetUserConfigConstMeta,
        argValues: [that, config],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDeviceConfigExposedDeviceDefinitionSetUserConfigConstMeta =>
      const TaskConstMeta(
        debugName: "ExposedDeviceDefinition_set_user_config",
        argNames: ["that", "config"],
      );

  @override
  ExposedUserDeviceCustomization
  crateApiDeviceConfigExposedDeviceDefinitionUserConfig({
    required ExposedDeviceDefinition that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_exposed_user_device_customization,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDeviceConfigExposedDeviceDefinitionUserConfigConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDeviceConfigExposedDeviceDefinitionUserConfigConstMeta =>
      const TaskConstMeta(
        debugName: "ExposedDeviceDefinition_user_config",
        argNames: ["that"],
      );

  @override
  String crateApiDeviceConfigExposedUserDeviceIdentifierAddress({
    required ExposedUserDeviceIdentifier that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDeviceConfigExposedUserDeviceIdentifierAddressConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDeviceConfigExposedUserDeviceIdentifierAddressConstMeta =>
      const TaskConstMeta(
        debugName: "ExposedUserDeviceIdentifier_address",
        argNames: ["that"],
      );

  @override
  String? crateApiDeviceConfigExposedUserDeviceIdentifierIdentifier({
    required ExposedUserDeviceIdentifier that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDeviceConfigExposedUserDeviceIdentifierIdentifierConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDeviceConfigExposedUserDeviceIdentifierIdentifierConstMeta =>
      const TaskConstMeta(
        debugName: "ExposedUserDeviceIdentifier_identifier",
        argNames: ["that"],
      );

  @override
  ExposedUserDeviceIdentifier
  crateApiDeviceConfigExposedUserDeviceIdentifierNew({
    required String address,
    required String protocol,
    String? identifier,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(address, serializer);
          sse_encode_String(protocol, serializer);
          sse_encode_opt_String(identifier, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDeviceConfigExposedUserDeviceIdentifierNewConstMeta,
        argValues: [address, protocol, identifier],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDeviceConfigExposedUserDeviceIdentifierNewConstMeta =>
      const TaskConstMeta(
        debugName: "ExposedUserDeviceIdentifier_new",
        argNames: ["address", "protocol", "identifier"],
      );

  @override
  String crateApiDeviceConfigExposedUserDeviceIdentifierProtocol({
    required ExposedUserDeviceIdentifier that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDeviceConfigExposedUserDeviceIdentifierProtocolConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDeviceConfigExposedUserDeviceIdentifierProtocolConstMeta =>
      const TaskConstMeta(
        debugName: "ExposedUserDeviceIdentifier_protocol",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiSpecifiersAddSerialSpecifier({
    required String protocol,
    required String port,
    required int baudRate,
    required int dataBits,
    required int stopBits,
    required String parity,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(protocol, serializer);
          sse_encode_String(port, serializer);
          sse_encode_u_32(baudRate, serializer);
          sse_encode_u_8(dataBits, serializer);
          sse_encode_u_8(stopBits, serializer);
          sse_encode_String(parity, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSpecifiersAddSerialSpecifierConstMeta,
        argValues: [protocol, port, baudRate, dataBits, stopBits, parity],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSpecifiersAddSerialSpecifierConstMeta =>
      const TaskConstMeta(
        debugName: "add_serial_specifier",
        argNames: [
          "protocol",
          "port",
          "baudRate",
          "dataBits",
          "stopBits",
          "parity",
        ],
      );

  @override
  Future<void> crateApiSpecifiersAddWebsocketSpecifier({
    required String protocol,
    required String name,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(protocol, serializer);
          sse_encode_String(name, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSpecifiersAddWebsocketSpecifierConstMeta,
        argValues: [protocol, name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSpecifiersAddWebsocketSpecifierConstMeta =>
      const TaskConstMeta(
        debugName: "add_websocket_specifier",
        argNames: ["protocol", "name"],
      );

  @override
  Future<void> crateApiUtilCrashReporting({required String sentryApiKey}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(sentryApiKey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilCrashReportingConstMeta,
        argValues: [sentryApiKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilCrashReportingConstMeta => const TaskConstMeta(
    debugName: "crash_reporting",
    argNames: ["sentryApiKey"],
  );

  @override
  Future<List<String>> crateApiSpecifiersGetProtocolNames() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSpecifiersGetProtocolNamesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSpecifiersGetProtocolNamesConstMeta =>
      const TaskConstMeta(debugName: "get_protocol_names", argNames: []);

  @override
  Future<String> crateApiDeviceConfigGetUserConfigStr() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDeviceConfigGetUserConfigStrConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDeviceConfigGetUserConfigStrConstMeta =>
      const TaskConstMeta(debugName: "get_user_config_str", argNames: []);

  @override
  Future<Map<ExposedUserDeviceIdentifier, ExposedDeviceDefinition>>
  crateApiDeviceConfigGetUserDeviceDefinitions() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition_None,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDeviceConfigGetUserDeviceDefinitionsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDeviceConfigGetUserDeviceDefinitionsConstMeta =>
      const TaskConstMeta(
        debugName: "get_user_device_definitions",
        argNames: [],
      );

  @override
  Future<List<(String, ExposedSerialSpecifier)>>
  crateApiSpecifiersGetUserSerialCommunicationSpecifiers() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_record_string_exposed_serial_specifier,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSpecifiersGetUserSerialCommunicationSpecifiersConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSpecifiersGetUserSerialCommunicationSpecifiersConstMeta =>
      const TaskConstMeta(
        debugName: "get_user_serial_communication_specifiers",
        argNames: [],
      );

  @override
  Future<List<(String, ExposedWebsocketSpecifier)>>
  crateApiSpecifiersGetUserWebsocketCommunicationSpecifiers() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_record_string_exposed_websocket_specifier,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSpecifiersGetUserWebsocketCommunicationSpecifiersConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSpecifiersGetUserWebsocketCommunicationSpecifiersConstMeta =>
      const TaskConstMeta(
        debugName: "get_user_websocket_communication_specifiers",
        argNames: [],
      );

  @override
  Future<void> crateApiSpecifiersRemoveSerialSpecifier({
    required String protocol,
    required String port,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(protocol, serializer);
          sse_encode_String(port, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSpecifiersRemoveSerialSpecifierConstMeta,
        argValues: [protocol, port],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSpecifiersRemoveSerialSpecifierConstMeta =>
      const TaskConstMeta(
        debugName: "remove_serial_specifier",
        argNames: ["protocol", "port"],
      );

  @override
  Future<void> crateApiDeviceConfigRemoveUserConfig({
    required ExposedUserDeviceIdentifier identifier,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
            identifier,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDeviceConfigRemoveUserConfigConstMeta,
        argValues: [identifier],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDeviceConfigRemoveUserConfigConstMeta =>
      const TaskConstMeta(
        debugName: "remove_user_config",
        argNames: ["identifier"],
      );

  @override
  Future<void> crateApiSpecifiersRemoveWebsocketSpecifier({
    required String protocol,
    required String name,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(protocol, serializer);
          sse_encode_String(name, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSpecifiersRemoveWebsocketSpecifierConstMeta,
        argValues: [protocol, name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSpecifiersRemoveWebsocketSpecifierConstMeta =>
      const TaskConstMeta(
        debugName: "remove_websocket_specifier",
        argNames: ["protocol", "name"],
      );

  @override
  Stream<String> crateApiRuntimeRunEngine({
    required EngineOptionsExternal args,
  }) {
    final sink = RustStreamSink<String>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_String_Sse(sink, serializer);
            sse_encode_box_autoadd_engine_options_external(args, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 20,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: sse_decode_AnyhowException,
          ),
          constMeta: kCrateApiRuntimeRunEngineConstMeta,
          argValues: [sink, args],
          apiImpl: this,
        ),
      ),
    );
    return sink.stream;
  }

  TaskConstMeta get kCrateApiRuntimeRunEngineConstMeta =>
      const TaskConstMeta(debugName: "run_engine", argNames: ["sink", "args"]);

  @override
  Future<bool> crateApiRuntimeRustRuntimeStarted() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiRuntimeRustRuntimeStartedConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRuntimeRustRuntimeStartedConstMeta =>
      const TaskConstMeta(debugName: "rust_runtime_started", argNames: []);

  @override
  Future<void> crateApiRuntimeSendBackendServerMessage({required String msg}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(msg, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiRuntimeSendBackendServerMessageConstMeta,
        argValues: [msg],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRuntimeSendBackendServerMessageConstMeta =>
      const TaskConstMeta(
        debugName: "send_backend_server_message",
        argNames: ["msg"],
      );

  @override
  Future<void> crateApiRuntimeSendRuntimeMsg({required String msgJson}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(msgJson, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiRuntimeSendRuntimeMsgConstMeta,
        argValues: [msgJson],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRuntimeSendRuntimeMsgConstMeta =>
      const TaskConstMeta(debugName: "send_runtime_msg", argNames: ["msgJson"]);

  @override
  Future<void> crateApiSpecifiersSetupDeviceConfigurationManager({
    String? baseConfig,
    String? userConfig,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_opt_String(baseConfig, serializer);
          sse_encode_opt_String(userConfig, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSpecifiersSetupDeviceConfigurationManagerConstMeta,
        argValues: [baseConfig, userConfig],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSpecifiersSetupDeviceConfigurationManagerConstMeta =>
      const TaskConstMeta(
        debugName: "setup_device_configuration_manager",
        argNames: ["baseConfig", "userConfig"],
      );

  @override
  Stream<String> crateApiUtilSetupLogging() {
    final sink = RustStreamSink<String>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_String_Sse(sink, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 25,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiUtilSetupLoggingConstMeta,
          argValues: [sink],
          apiImpl: this,
        ),
      ),
    );
    return sink.stream;
  }

  TaskConstMeta get kCrateApiUtilSetupLoggingConstMeta =>
      const TaskConstMeta(debugName: "setup_logging", argNames: ["sink"]);

  @override
  Future<void> crateApiUtilShutdownLogging() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilShutdownLoggingConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilShutdownLoggingConstMeta =>
      const TaskConstMeta(debugName: "shutdown_logging", argNames: []);

  @override
  Future<void> crateApiRuntimeStopEngine() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiRuntimeStopEngineConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRuntimeStopEngineConstMeta =>
      const TaskConstMeta(debugName: "stop_engine", argNames: []);

  @override
  Future<void> crateApiDeviceConfigUpdateUserConfig({
    required ExposedUserDeviceIdentifier identifier,
    required ExposedDeviceDefinition config,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
            identifier,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
            config,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDeviceConfigUpdateUserConfigConstMeta,
        argValues: [identifier, config],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDeviceConfigUpdateUserConfigConstMeta =>
      const TaskConstMeta(
        debugName: "update_user_config",
        argNames: ["identifier", "config"],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ExposedDeviceDefinition => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ExposedDeviceDefinition => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ExposedUserDeviceIdentifier => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ExposedUserDeviceIdentifier => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ExposedDeviceDefinition
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExposedDeviceDefinitionImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ExposedUserDeviceIdentifier
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExposedUserDeviceIdentifierImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ExposedDeviceDefinition
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExposedDeviceDefinitionImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ExposedDeviceDefinition
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExposedDeviceDefinitionImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ExposedUserDeviceIdentifier
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExposedUserDeviceIdentifierImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  Map<ExposedUserDeviceIdentifier, ExposedDeviceDefinition>
  dco_decode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition_None(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_user_device_identifier_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_device_definition(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  ExposedDeviceDefinition
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExposedDeviceDefinitionImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ExposedUserDeviceIdentifier
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExposedUserDeviceIdentifierImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  UuidValue dco_decode_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UuidValue.fromByteList(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  EngineOptionsExternal dco_decode_box_autoadd_engine_options_external(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_engine_options_external(raw);
  }

  @protected
  ExposedUserDeviceCustomization
  dco_decode_box_autoadd_exposed_user_device_customization(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_exposed_user_device_customization(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  EngineOptionsExternal dco_decode_engine_options_external(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 26)
      throw Exception('unexpected arr length: expect 26 but see ${arr.length}');
    return EngineOptionsExternal(
      deviceConfigJson: dco_decode_opt_String(arr[0]),
      userDeviceConfigJson: dco_decode_opt_String(arr[1]),
      userDeviceConfigPath: dco_decode_opt_String(arr[2]),
      serverName: dco_decode_String(arr[3]),
      websocketUseAllInterfaces: dco_decode_bool(arr[4]),
      websocketPort: dco_decode_opt_box_autoadd_u_16(arr[5]),
      frontendWebsocketPort: dco_decode_opt_box_autoadd_u_16(arr[6]),
      frontendInProcessChannel: dco_decode_bool(arr[7]),
      maxPingTime: dco_decode_u_32(arr[8]),
      useBluetoothLe: dco_decode_bool(arr[9]),
      useSerialPort: dco_decode_bool(arr[10]),
      useHid: dco_decode_bool(arr[11]),
      useLovenseDongleSerial: dco_decode_bool(arr[12]),
      useLovenseDongleHid: dco_decode_bool(arr[13]),
      useXinput: dco_decode_bool(arr[14]),
      useLovenseConnect: dco_decode_bool(arr[15]),
      useDeviceWebsocketServer: dco_decode_bool(arr[16]),
      deviceWebsocketServerPort: dco_decode_opt_box_autoadd_u_16(arr[17]),
      crashMainThread: dco_decode_bool(arr[18]),
      crashTaskThread: dco_decode_bool(arr[19]),
      websocketClientAddress: dco_decode_opt_String(arr[20]),
      broadcastServerMdns: dco_decode_bool(arr[21]),
      mdnsSuffix: dco_decode_opt_String(arr[22]),
      repeaterMode: dco_decode_bool(arr[23]),
      repeaterLocalPort: dco_decode_opt_box_autoadd_u_16(arr[24]),
      repeaterRemoteAddress: dco_decode_opt_String(arr[25]),
    );
  }

  @protected
  ExposedSerialSpecifier dco_decode_exposed_serial_specifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ExposedSerialSpecifier(
      baudRate: dco_decode_u_32(arr[0]),
      dataBits: dco_decode_u_8(arr[1]),
      stopBits: dco_decode_u_8(arr[2]),
      parity: dco_decode_String(arr[3]),
      port: dco_decode_String(arr[4]),
    );
  }

  @protected
  ExposedUserDeviceCustomization dco_decode_exposed_user_device_customization(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ExposedUserDeviceCustomization(
      displayName: dco_decode_opt_String(arr[0]),
      allow: dco_decode_bool(arr[1]),
      deny: dco_decode_bool(arr[2]),
      index: dco_decode_u_32(arr[3]),
      messageGapMs: dco_decode_opt_box_autoadd_u_32(arr[4]),
    );
  }

  @protected
  ExposedWebsocketSpecifier dco_decode_exposed_websocket_specifier(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ExposedWebsocketSpecifier(name: dco_decode_String(arr[0]));
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(ExposedUserDeviceIdentifier, ExposedDeviceDefinition)>
  dco_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_user_device_identifier_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_device_definition(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_user_device_identifier_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_device_definition,
        )
        .toList();
  }

  @protected
  List<(String, ExposedSerialSpecifier)>
  dco_decode_list_record_string_exposed_serial_specifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_exposed_serial_specifier)
        .toList();
  }

  @protected
  List<(String, ExposedWebsocketSpecifier)>
  dco_decode_list_record_string_exposed_websocket_specifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_exposed_websocket_specifier)
        .toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_16(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  (ExposedUserDeviceIdentifier, ExposedDeviceDefinition)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_user_device_identifier_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_device_definition(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
        arr[0],
      ),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
        arr[1],
      ),
    );
  }

  @protected
  (String, ExposedSerialSpecifier)
  dco_decode_record_string_exposed_serial_specifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_exposed_serial_specifier(arr[1]),
    );
  }

  @protected
  (String, ExposedWebsocketSpecifier)
  dco_decode_record_string_exposed_websocket_specifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_exposed_websocket_specifier(arr[1]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ExposedDeviceDefinition
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExposedDeviceDefinitionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ExposedUserDeviceIdentifier
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExposedUserDeviceIdentifierImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ExposedDeviceDefinition
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExposedDeviceDefinitionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ExposedDeviceDefinition
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExposedDeviceDefinitionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ExposedUserDeviceIdentifier
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExposedUserDeviceIdentifierImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Map<ExposedUserDeviceIdentifier, ExposedDeviceDefinition>
  sse_decode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_user_device_identifier_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_device_definition(
          deserializer,
        );
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ExposedDeviceDefinition
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExposedDeviceDefinitionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ExposedUserDeviceIdentifier
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExposedUserDeviceIdentifierImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  UuidValue sse_decode_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return UuidValue.fromByteList(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  EngineOptionsExternal sse_decode_box_autoadd_engine_options_external(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_engine_options_external(deserializer));
  }

  @protected
  ExposedUserDeviceCustomization
  sse_decode_box_autoadd_exposed_user_device_customization(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_exposed_user_device_customization(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_16(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  EngineOptionsExternal sse_decode_engine_options_external(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_deviceConfigJson = sse_decode_opt_String(deserializer);
    var var_userDeviceConfigJson = sse_decode_opt_String(deserializer);
    var var_userDeviceConfigPath = sse_decode_opt_String(deserializer);
    var var_serverName = sse_decode_String(deserializer);
    var var_websocketUseAllInterfaces = sse_decode_bool(deserializer);
    var var_websocketPort = sse_decode_opt_box_autoadd_u_16(deserializer);
    var var_frontendWebsocketPort = sse_decode_opt_box_autoadd_u_16(
      deserializer,
    );
    var var_frontendInProcessChannel = sse_decode_bool(deserializer);
    var var_maxPingTime = sse_decode_u_32(deserializer);
    var var_useBluetoothLe = sse_decode_bool(deserializer);
    var var_useSerialPort = sse_decode_bool(deserializer);
    var var_useHid = sse_decode_bool(deserializer);
    var var_useLovenseDongleSerial = sse_decode_bool(deserializer);
    var var_useLovenseDongleHid = sse_decode_bool(deserializer);
    var var_useXinput = sse_decode_bool(deserializer);
    var var_useLovenseConnect = sse_decode_bool(deserializer);
    var var_useDeviceWebsocketServer = sse_decode_bool(deserializer);
    var var_deviceWebsocketServerPort = sse_decode_opt_box_autoadd_u_16(
      deserializer,
    );
    var var_crashMainThread = sse_decode_bool(deserializer);
    var var_crashTaskThread = sse_decode_bool(deserializer);
    var var_websocketClientAddress = sse_decode_opt_String(deserializer);
    var var_broadcastServerMdns = sse_decode_bool(deserializer);
    var var_mdnsSuffix = sse_decode_opt_String(deserializer);
    var var_repeaterMode = sse_decode_bool(deserializer);
    var var_repeaterLocalPort = sse_decode_opt_box_autoadd_u_16(deserializer);
    var var_repeaterRemoteAddress = sse_decode_opt_String(deserializer);
    return EngineOptionsExternal(
      deviceConfigJson: var_deviceConfigJson,
      userDeviceConfigJson: var_userDeviceConfigJson,
      userDeviceConfigPath: var_userDeviceConfigPath,
      serverName: var_serverName,
      websocketUseAllInterfaces: var_websocketUseAllInterfaces,
      websocketPort: var_websocketPort,
      frontendWebsocketPort: var_frontendWebsocketPort,
      frontendInProcessChannel: var_frontendInProcessChannel,
      maxPingTime: var_maxPingTime,
      useBluetoothLe: var_useBluetoothLe,
      useSerialPort: var_useSerialPort,
      useHid: var_useHid,
      useLovenseDongleSerial: var_useLovenseDongleSerial,
      useLovenseDongleHid: var_useLovenseDongleHid,
      useXinput: var_useXinput,
      useLovenseConnect: var_useLovenseConnect,
      useDeviceWebsocketServer: var_useDeviceWebsocketServer,
      deviceWebsocketServerPort: var_deviceWebsocketServerPort,
      crashMainThread: var_crashMainThread,
      crashTaskThread: var_crashTaskThread,
      websocketClientAddress: var_websocketClientAddress,
      broadcastServerMdns: var_broadcastServerMdns,
      mdnsSuffix: var_mdnsSuffix,
      repeaterMode: var_repeaterMode,
      repeaterLocalPort: var_repeaterLocalPort,
      repeaterRemoteAddress: var_repeaterRemoteAddress,
    );
  }

  @protected
  ExposedSerialSpecifier sse_decode_exposed_serial_specifier(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_baudRate = sse_decode_u_32(deserializer);
    var var_dataBits = sse_decode_u_8(deserializer);
    var var_stopBits = sse_decode_u_8(deserializer);
    var var_parity = sse_decode_String(deserializer);
    var var_port = sse_decode_String(deserializer);
    return ExposedSerialSpecifier(
      baudRate: var_baudRate,
      dataBits: var_dataBits,
      stopBits: var_stopBits,
      parity: var_parity,
      port: var_port,
    );
  }

  @protected
  ExposedUserDeviceCustomization sse_decode_exposed_user_device_customization(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_displayName = sse_decode_opt_String(deserializer);
    var var_allow = sse_decode_bool(deserializer);
    var var_deny = sse_decode_bool(deserializer);
    var var_index = sse_decode_u_32(deserializer);
    var var_messageGapMs = sse_decode_opt_box_autoadd_u_32(deserializer);
    return ExposedUserDeviceCustomization(
      displayName: var_displayName,
      allow: var_allow,
      deny: var_deny,
      index: var_index,
      messageGapMs: var_messageGapMs,
    );
  }

  @protected
  ExposedWebsocketSpecifier sse_decode_exposed_websocket_specifier(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    return ExposedWebsocketSpecifier(name: var_name);
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(ExposedUserDeviceIdentifier, ExposedDeviceDefinition)>
  sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_user_device_identifier_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_device_definition(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(ExposedUserDeviceIdentifier, ExposedDeviceDefinition)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_user_device_identifier_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_device_definition(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<(String, ExposedSerialSpecifier)>
  sse_decode_list_record_string_exposed_serial_specifier(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, ExposedSerialSpecifier)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_exposed_serial_specifier(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, ExposedWebsocketSpecifier)>
  sse_decode_list_record_string_exposed_websocket_specifier(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, ExposedWebsocketSpecifier)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_record_string_exposed_websocket_specifier(deserializer),
      );
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_16(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (ExposedUserDeviceIdentifier, ExposedDeviceDefinition)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_user_device_identifier_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_device_definition(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
          deserializer,
        );
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  (String, ExposedSerialSpecifier)
  sse_decode_record_string_exposed_serial_specifier(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_exposed_serial_specifier(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, ExposedWebsocketSpecifier)
  sse_decode_record_string_exposed_websocket_specifier(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_exposed_websocket_specifier(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
    ExposedDeviceDefinition self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ExposedDeviceDefinitionImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
    ExposedUserDeviceIdentifier self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ExposedUserDeviceIdentifierImpl).frbInternalSseEncode(
        move: true,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
    ExposedDeviceDefinition self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ExposedDeviceDefinitionImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
    ExposedDeviceDefinition self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ExposedDeviceDefinitionImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
    ExposedUserDeviceIdentifier self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ExposedUserDeviceIdentifierImpl).frbInternalSseEncode(
        move: false,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition_None(
    Map<ExposedUserDeviceIdentifier, ExposedDeviceDefinition> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_user_device_identifier_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_device_definition(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
    ExposedDeviceDefinition self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ExposedDeviceDefinitionImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
    ExposedUserDeviceIdentifier self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ExposedUserDeviceIdentifierImpl).frbInternalSseEncode(
        move: null,
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
    RustStreamSink<String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_Uuid(UuidValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.toBytes(), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_engine_options_external(
    EngineOptionsExternal self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_engine_options_external(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_exposed_user_device_customization(
    ExposedUserDeviceCustomization self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_exposed_user_device_customization(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_engine_options_external(
    EngineOptionsExternal self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.deviceConfigJson, serializer);
    sse_encode_opt_String(self.userDeviceConfigJson, serializer);
    sse_encode_opt_String(self.userDeviceConfigPath, serializer);
    sse_encode_String(self.serverName, serializer);
    sse_encode_bool(self.websocketUseAllInterfaces, serializer);
    sse_encode_opt_box_autoadd_u_16(self.websocketPort, serializer);
    sse_encode_opt_box_autoadd_u_16(self.frontendWebsocketPort, serializer);
    sse_encode_bool(self.frontendInProcessChannel, serializer);
    sse_encode_u_32(self.maxPingTime, serializer);
    sse_encode_bool(self.useBluetoothLe, serializer);
    sse_encode_bool(self.useSerialPort, serializer);
    sse_encode_bool(self.useHid, serializer);
    sse_encode_bool(self.useLovenseDongleSerial, serializer);
    sse_encode_bool(self.useLovenseDongleHid, serializer);
    sse_encode_bool(self.useXinput, serializer);
    sse_encode_bool(self.useLovenseConnect, serializer);
    sse_encode_bool(self.useDeviceWebsocketServer, serializer);
    sse_encode_opt_box_autoadd_u_16(self.deviceWebsocketServerPort, serializer);
    sse_encode_bool(self.crashMainThread, serializer);
    sse_encode_bool(self.crashTaskThread, serializer);
    sse_encode_opt_String(self.websocketClientAddress, serializer);
    sse_encode_bool(self.broadcastServerMdns, serializer);
    sse_encode_opt_String(self.mdnsSuffix, serializer);
    sse_encode_bool(self.repeaterMode, serializer);
    sse_encode_opt_box_autoadd_u_16(self.repeaterLocalPort, serializer);
    sse_encode_opt_String(self.repeaterRemoteAddress, serializer);
  }

  @protected
  void sse_encode_exposed_serial_specifier(
    ExposedSerialSpecifier self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.baudRate, serializer);
    sse_encode_u_8(self.dataBits, serializer);
    sse_encode_u_8(self.stopBits, serializer);
    sse_encode_String(self.parity, serializer);
    sse_encode_String(self.port, serializer);
  }

  @protected
  void sse_encode_exposed_user_device_customization(
    ExposedUserDeviceCustomization self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.displayName, serializer);
    sse_encode_bool(self.allow, serializer);
    sse_encode_bool(self.deny, serializer);
    sse_encode_u_32(self.index, serializer);
    sse_encode_opt_box_autoadd_u_32(self.messageGapMs, serializer);
  }

  @protected
  void sse_encode_exposed_websocket_specifier(
    ExposedWebsocketSpecifier self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
  sse_encode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_user_device_identifier_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_device_definition(
    List<(ExposedUserDeviceIdentifier, ExposedDeviceDefinition)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_user_device_identifier_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_device_definition(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_record_string_exposed_serial_specifier(
    List<(String, ExposedSerialSpecifier)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_exposed_serial_specifier(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_exposed_websocket_specifier(
    List<(String, ExposedWebsocketSpecifier)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_exposed_websocket_specifier(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_16(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_16(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_user_device_identifier_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_exposed_device_definition(
    (ExposedUserDeviceIdentifier, ExposedDeviceDefinition) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedUserDeviceIdentifier(
      self.$1,
      serializer,
    );
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExposedDeviceDefinition(
      self.$2,
      serializer,
    );
  }

  @protected
  void sse_encode_record_string_exposed_serial_specifier(
    (String, ExposedSerialSpecifier) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_exposed_serial_specifier(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_exposed_websocket_specifier(
    (String, ExposedWebsocketSpecifier) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_exposed_websocket_specifier(self.$2, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class ExposedDeviceDefinitionImpl extends RustOpaque
    implements ExposedDeviceDefinition {
  // Not to be used by end users
  ExposedDeviceDefinitionImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ExposedDeviceDefinitionImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_increment_strong_count_ExposedDeviceDefinition,
    rustArcDecrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_ExposedDeviceDefinition,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_ExposedDeviceDefinitionPtr,
  );

  UuidValue get id => RustLib.instance.api
      .crateApiDeviceConfigExposedDeviceDefinitionId(that: this);

  String get name => RustLib.instance.api
      .crateApiDeviceConfigExposedDeviceDefinitionName(that: this);

  void setUserConfig({required ExposedUserDeviceCustomization config}) =>
      RustLib.instance.api
          .crateApiDeviceConfigExposedDeviceDefinitionSetUserConfig(
            that: this,
            config: config,
          );

  ExposedUserDeviceCustomization get userConfig => RustLib.instance.api
      .crateApiDeviceConfigExposedDeviceDefinitionUserConfig(that: this);
}

@sealed
class ExposedUserDeviceIdentifierImpl extends RustOpaque
    implements ExposedUserDeviceIdentifier {
  // Not to be used by end users
  ExposedUserDeviceIdentifierImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ExposedUserDeviceIdentifierImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_increment_strong_count_ExposedUserDeviceIdentifier,
    rustArcDecrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_ExposedUserDeviceIdentifier,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_ExposedUserDeviceIdentifierPtr,
  );

  String get address => RustLib.instance.api
      .crateApiDeviceConfigExposedUserDeviceIdentifierAddress(that: this);

  String? get identifier => RustLib.instance.api
      .crateApiDeviceConfigExposedUserDeviceIdentifierIdentifier(that: this);

  String get protocol => RustLib.instance.api
      .crateApiDeviceConfigExposedUserDeviceIdentifierProtocol(that: this);
}
