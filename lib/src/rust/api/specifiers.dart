// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`, `fmt`, `from`, `from`, `into`, `into`

Future<void> setupDeviceConfigurationManager({
  String? baseConfig,
  String? userConfig,
}) => RustLib.instance.api.crateApiSpecifiersSetupDeviceConfigurationManager(
  baseConfig: baseConfig,
  userConfig: userConfig,
);

Future<List<(String, ExposedWebsocketSpecifier)>>
getUserWebsocketCommunicationSpecifiers() => RustLib.instance.api
    .crateApiSpecifiersGetUserWebsocketCommunicationSpecifiers();

Future<List<(String, ExposedSerialSpecifier)>>
getUserSerialCommunicationSpecifiers() => RustLib.instance.api
    .crateApiSpecifiersGetUserSerialCommunicationSpecifiers();

Future<void> addWebsocketSpecifier({
  required String protocol,
  required String name,
}) => RustLib.instance.api.crateApiSpecifiersAddWebsocketSpecifier(
  protocol: protocol,
  name: name,
);

Future<void> removeWebsocketSpecifier({
  required String protocol,
  required String name,
}) => RustLib.instance.api.crateApiSpecifiersRemoveWebsocketSpecifier(
  protocol: protocol,
  name: name,
);

Future<void> addSerialSpecifier({
  required String protocol,
  required String port,
  required int baudRate,
  required int dataBits,
  required int stopBits,
  required String parity,
}) => RustLib.instance.api.crateApiSpecifiersAddSerialSpecifier(
  protocol: protocol,
  port: port,
  baudRate: baudRate,
  dataBits: dataBits,
  stopBits: stopBits,
  parity: parity,
);

Future<void> removeSerialSpecifier({
  required String protocol,
  required String port,
}) => RustLib.instance.api.crateApiSpecifiersRemoveSerialSpecifier(
  protocol: protocol,
  port: port,
);

Future<List<String>> getProtocolNames() =>
    RustLib.instance.api.crateApiSpecifiersGetProtocolNames();

class ExposedSerialSpecifier {
  final int baudRate;
  final int dataBits;
  final int stopBits;
  final String parity;
  final String port;

  const ExposedSerialSpecifier({
    required this.baudRate,
    required this.dataBits,
    required this.stopBits,
    required this.parity,
    required this.port,
  });

  @override
  int get hashCode =>
      baudRate.hashCode ^
      dataBits.hashCode ^
      stopBits.hashCode ^
      parity.hashCode ^
      port.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ExposedSerialSpecifier &&
          runtimeType == other.runtimeType &&
          baudRate == other.baudRate &&
          dataBits == other.dataBits &&
          stopBits == other.stopBits &&
          parity == other.parity &&
          port == other.port;
}

class ExposedWebsocketSpecifier {
  final String name;

  const ExposedWebsocketSpecifier({required this.name});

  @override
  int get hashCode => name.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ExposedWebsocketSpecifier &&
          runtimeType == other.runtimeType &&
          name == other.name;
}
