// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

// These functions are ignored because they are not marked as `pub`: `new_from_position_with_duration`, `new_from_position`, `new_from_value`, `new`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `hash`, `into`, `into`

Future<void> updateUserConfig({
  required ExposedUserDeviceIdentifier identifier,
  required ExposedServerDeviceDefinition config,
}) => RustLib.instance.api.crateApiDeviceConfigUpdateUserConfig(
  identifier: identifier,
  config: config,
);

Future<void> removeUserConfig({
  required ExposedUserDeviceIdentifier identifier,
}) => RustLib.instance.api.crateApiDeviceConfigRemoveUserConfig(
  identifier: identifier,
);

Future<String> getUserConfigStr() =>
    RustLib.instance.api.crateApiDeviceConfigGetUserConfigStr();

Future<Map<ExposedUserDeviceIdentifier, ExposedServerDeviceDefinition>>
getDeviceDefinitions() =>
    RustLib.instance.api.crateApiDeviceConfigGetDeviceDefinitions();

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExposedRangeWithLimit>>
abstract class ExposedRangeWithLimit implements RustOpaqueInterface {
  (int, int) get base;

  set user((int, int) range);

  (int, int) get user;
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExposedServerDeviceDefinition>>
abstract class ExposedServerDeviceDefinition implements RustOpaqueInterface {
  bool get allow;

  bool get deny;

  String? get displayName;

  List<ExposedServerDeviceFeature> get features;

  UuidValue get id;

  int get index;

  int? get messageGapMs;

  String get name;

  set allow(bool allow);

  set deny(bool deny);

  set displayName(String? displayName);

  void updateFeature({required ExposedServerDeviceFeature feature});

  void updateFeatureOutputProperties({
    required ExposedServerDeviceFeatureOutputProperties props,
  });
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExposedServerDeviceFeature>>
abstract class ExposedServerDeviceFeature implements RustOpaqueInterface {
  String get description;

  UuidValue get id;

  ExposedServerDeviceFeatureInput? get input;

  ExposedServerDeviceFeatureOutput? get output;

  set output(ExposedServerDeviceFeatureOutput? output);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExposedServerDeviceFeatureInput>>
abstract class ExposedServerDeviceFeatureInput implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExposedServerDeviceFeatureOutput>>
abstract class ExposedServerDeviceFeatureOutput implements RustOpaqueInterface {
  ExposedServerDeviceFeatureOutputProperties? get constrict;

  ExposedServerDeviceFeatureOutputProperties? get led;

  ExposedServerDeviceFeatureOutputProperties? get oscillate;

  ExposedServerDeviceFeatureOutputProperties? get position;

  ExposedServerDeviceFeatureOutputProperties? get positionWithDuration;

  ExposedServerDeviceFeatureOutputProperties? get rotate;

  ExposedServerDeviceFeatureOutputProperties? get spray;

  ExposedServerDeviceFeatureOutputProperties? get temperature;

  ExposedServerDeviceFeatureOutputProperties? get vibrate;
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExposedServerDeviceFeatureOutputProperties>>
abstract class ExposedServerDeviceFeatureOutputProperties
    implements RustOpaqueInterface {
  bool get disabled;

  ExposedRangeWithLimit? get duration;

  ExposedRangeWithLimit? get position;

  bool get reversePosition;

  set disabled(bool v);

  set duration(ExposedRangeWithLimit? duration);

  set position(ExposedRangeWithLimit? position);

  set reversePosition(bool v);

  set value(ExposedRangeWithLimit? value);

  ExposedRangeWithLimit? get value;
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExposedUserDeviceIdentifier>>
abstract class ExposedUserDeviceIdentifier implements RustOpaqueInterface {
  String get address;

  String? get identifier;

  factory ExposedUserDeviceIdentifier({
    required String address,
    required String protocol,
    String? identifier,
  }) => RustLib.instance.api.crateApiDeviceConfigExposedUserDeviceIdentifierNew(
    address: address,
    protocol: protocol,
    identifier: identifier,
  );

  String get protocol;
}
