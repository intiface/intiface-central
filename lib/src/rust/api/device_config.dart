// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `ExposedBaseDeviceDefinition`, `ExposedDeviceFeatureInput`, `ExposedDeviceFeatureOutput`, `ExposedDeviceFeature`, `ExposedServerBaseDeviceFeatureOutput`, `ExposedServerUserDeviceFeatureOutput`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `into`, `into`, `into`, `into`, `into`, `into`

Future<void> removeUserConfig({
  required ExposedUserDeviceIdentifier identifier,
}) => RustLib.instance.api.crateApiDeviceConfigRemoveUserConfig(
  identifier: identifier,
);

Future<String> getUserConfigStr() =>
    RustLib.instance.api.crateApiDeviceConfigGetUserConfigStr();

class ExposedUserDeviceCustomization {
  final String? displayName;
  final bool allow;
  final bool deny;
  final int index;
  final int? messageGapMs;

  const ExposedUserDeviceCustomization({
    this.displayName,
    required this.allow,
    required this.deny,
    required this.index,
    this.messageGapMs,
  });

  @override
  int get hashCode =>
      displayName.hashCode ^
      allow.hashCode ^
      deny.hashCode ^
      index.hashCode ^
      messageGapMs.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ExposedUserDeviceCustomization &&
          runtimeType == other.runtimeType &&
          displayName == other.displayName &&
          allow == other.allow &&
          deny == other.deny &&
          index == other.index &&
          messageGapMs == other.messageGapMs;
}

class ExposedUserDeviceIdentifier {
  final String address;
  final String protocol;
  final String? identifier;

  const ExposedUserDeviceIdentifier({
    required this.address,
    required this.protocol,
    this.identifier,
  });

  @override
  int get hashCode =>
      address.hashCode ^ protocol.hashCode ^ identifier.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ExposedUserDeviceIdentifier &&
          runtimeType == other.runtimeType &&
          address == other.address &&
          protocol == other.protocol &&
          identifier == other.identifier;
}
