// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'enums.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `hash`, `into`, `into`, `into`, `into`
// These functions are ignored (category: IgnoreBecauseExplicitAttribute): `feature_uuid`

Future<void> updateUserConfig({
  required ExposedUserDeviceIdentifier identifier,
  required ExposedDeviceDefinition config,
}) => RustLib.instance.api.crateApiDeviceConfigUpdateUserConfig(
  identifier: identifier,
  config: config,
);

Future<void> removeUserConfig({
  required ExposedUserDeviceIdentifier identifier,
}) => RustLib.instance.api.crateApiDeviceConfigRemoveUserConfig(
  identifier: identifier,
);

Future<String> getUserConfigStr() =>
    RustLib.instance.api.crateApiDeviceConfigGetUserConfigStr();

Future<Map<ExposedUserDeviceIdentifier, ExposedDeviceDefinition>>
getUserDeviceDefinitions() =>
    RustLib.instance.api.crateApiDeviceConfigGetUserDeviceDefinitions();

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExposedDeviceDefinition>>
abstract class ExposedDeviceDefinition implements RustOpaqueInterface {
  UuidValue get id;

  String get name;

  List<ExposedFeatureOutput> outputs();

  void setUserConfig({required ExposedUserDeviceCustomization config});

  void updateOutput({required ExposedFeatureOutput userOutput});

  ExposedUserDeviceCustomization get userConfig;
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExposedFeatureOutput>>
abstract class ExposedFeatureOutput implements RustOpaqueInterface {
  String get description;

  int get featureIndex;

  FeatureType get featureType;

  OutputType get outputType;

  void setStepLimit({required (int, int) limit});

  (int, int) get stepLimit;

  (int, int) get stepRange;
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExposedUserDeviceIdentifier>>
abstract class ExposedUserDeviceIdentifier implements RustOpaqueInterface {
  String get address;

  String? get identifier;

  factory ExposedUserDeviceIdentifier({
    required String address,
    required String protocol,
    String? identifier,
  }) => RustLib.instance.api.crateApiDeviceConfigExposedUserDeviceIdentifierNew(
    address: address,
    protocol: protocol,
    identifier: identifier,
  );

  String get protocol;
}

class ExposedUserDeviceCustomization {
  final String? displayName;
  final bool allow;
  final bool deny;
  final int index;
  final int? messageGapMs;

  const ExposedUserDeviceCustomization({
    this.displayName,
    required this.allow,
    required this.deny,
    required this.index,
    this.messageGapMs,
  });

  @override
  int get hashCode =>
      displayName.hashCode ^
      allow.hashCode ^
      deny.hashCode ^
      index.hashCode ^
      messageGapMs.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ExposedUserDeviceCustomization &&
          runtimeType == other.runtimeType &&
          displayName == other.displayName &&
          allow == other.allow &&
          deny == other.deny &&
          index == other.index &&
          messageGapMs == other.messageGapMs;
}
